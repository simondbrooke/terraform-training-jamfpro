#!/bin/bash

# ==============================================================================
# SCRIPT:   Generate Full Terraform Config for Jamf Categories (Modern API)
# PROVIDER: deploymenttheory/jamfpro
# PURPOSE:  Uses the /api/v1/categories endpoint to get correct priorities
#           and avoid the 'null' issue from the Classic API.
#
# REQUIRES: curl, jq, sed
# ==============================================================================

# --- Configuration ---
HCL_FILE="jamfpro_categories.tf"
IMPORT_SCRIPT="_import_jamfpro.sh"

# 1. --- Get Jamf URL and Credentials ---
read -p "Enter your Jamf Pro URL (e.g., https://your.jamf.pro): " jamfURL
read -p "Enter your Jamf Pro Client ID: " jamfClientID
read -sp "Enter your Jamf Pro Client Secret: " jamfClientSecret
echo # Add a newline after the hidden password prompt

# Clean up URL
jamfURL="${jamfURL%/}"

# 2. --- Authenticate and Get Bearer Token (OAuth) ---
echo
echo "üîí Authenticating with $jamfURL using Client ID..."

tokenResponse=$(curl -s -X POST "${jamfURL}/api/oauth/token" \
     -H "Content-Type: application/x-www-form-urlencoded" \
     --data-urlencode "grant_type=client_credentials" \
     --data-urlencode "client_id=${jamfClientID}" \
     --data-urlencode "client_secret=${jamfClientSecret}")

token=$(echo "$tokenResponse" | jq -r .access_token)

if [ "$token" == "null" ] || [ -z "$token" ]; then
    echo "‚ùå Error: Could not retrieve authentication token."
    echo "Please check your URL, Client ID, and Client Secret."
    echo "Make sure the API Client has permissions to 'Read Categories' for the Jamf Pro API."
    echo "Server Response: $tokenResponse"
    exit 1
fi

echo "‚úÖ Successfully authenticated."

# 3. --- Fetch Category Data ---
echo "üöö Fetching categories using /api/v1/categories..."
# <-- MODIFIED: Using the modern v1 API endpoint
apiData=$(curl -s -H "Authorization: Bearer ${token}" -H "Accept: application/json" "${jamfURL}/api/v1/categories")

if [ -z "$apiData" ]; then
    echo "‚ùå Error: No data received from API."
    exit 1
fi

# 4. --- Generate Terraform and Import Files ---
echo "ü§ñ Generating Terraform files..."

# Clear/create the HCL file and add a header
cat <<EOF > $HCL_FILE
# -----------------------------------------------
# AUTOGENERATED FILE - DO NOT EDIT MANUALLY
# Provider: deploymenttheory/jamfpro
# Run 'generate_terraform_config.sh' to refresh.
# -----------------------------------------------

EOF

# Clear/create the import script and add a header
cat <<EOF > $IMPORT_SCRIPT
#!/bin/bash
# AUTOGENERATED SCRIPT
# This script will import all categories into your Terraform state
# for the deploymenttheory/jamfpro provider.

echo "--- Starting Terraform import for categories ---"

# Initialize a counter for successes
success_count=0
total_count=0

# Define a function to run import and check for errors
run_import() {
    let total_count+=1
    echo "Importing: \$1 (ID: \$2)"
    if terraform import "\$1" "\$2"; then
        let success_count+=1
    else
        echo "‚ö†Ô∏è  Warning: Failed to import \$1 (ID: \$2). It may already be in your state."
    fi
}

EOF

# --- MODIFIED JQ QUERY ---
# 1. Uses '.results[]' which is the v1 API's array format
# 2. Filters out 'null' names
# 3. If 'priority' is null, it defaults to 10 (// 10) as a safety net
jq_query='.results[] | select(.name != null) | "\(.id)\t\(.name)\t\(.priority // 10)"'

# Loop through JSON and append to both files
echo "$apiData" | jq -r "$jq_query" | while IFS=$'\t' read -r id name priority; do
    
    # Sanitize the name for use as a Terraform resource address
    resource_name=$(echo "$name" | tr '[:upper:]' '[:lower:]' | sed -e 's/[ -]/_/g' -e 's/[^a-z0-9_]//g')

    # --- Append HCL to categories.tf ---
    cat <<EOF >> $HCL_FILE
resource "jamfpro_category" "${resource_name}" {
  name     = "${name}"
  priority = ${priority}
}

EOF

    # --- Append command to _import.sh ---
    echo "run_import 'jamfpro_category.${resource_name}' ${id}" >> $IMPORT_SCRIPT

done

# Make the import script executable
chmod +x $IMPORT_SCRIPT

# Finalize the import script
cat <<EOF >> $IMPORT_SCRIPT

echo ""
echo "--- ‚úÖ Import complete. ---"
echo "\$success_count / \$total_count categories successfully imported."
EOF

echo
echo "--- ‚úÖ Success! ---"
echo "Your Terraform files have been generated."
echo "Created: ${HCL_FILE} (Terraform HCL)"
echo "Created: ${IMPORT_SCRIPT} (Import script)"

exit 0